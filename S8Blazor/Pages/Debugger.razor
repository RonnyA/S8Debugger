@page "/Debugger"
@inject IS8Service s8service
@implements IDisposable
    <h1>Dissasembler</h1>
    <div class="form-group">
        <label for="Input">Input</label>
        <input class="form-control" id="Input" @bind="@input" placeholder="Føde" />
    </div>

    <br />

    <MonacoEditor @ref="_editor" Id="s8editor" ConstructionOptions="EditorConstructionOptions" OnDidInit="EditorOnDidInit" OnContextMenu="OnContextMenu" />


    <br />
    <br />

<textarea class="width" readonly @bind="@Output" cols="60" rows="10"></textarea>
    <br />
    <br />
    <button class="btn btn-primary" @onclick="RunCode">Run</button>
    <button class="btn btn-secondary" @onclick="StepCode">Step</button>
    <button class="btn btn-danger" @onclick="ResetCode">Reset</button>

    @code {

        string _input;
        private MonacoEditor _editor { get; set; }

        string Assembly = string.Empty;
        string Output = string.Empty;
        string Command = string.Empty;
        private int _currentLine = -1;

        public string input
        {
            get { return _input; }
            set { _input = value; s8service.Parser.s8d.SetInputFromHexString(_input); }
        }

        #region Initialize and clean up
        protected override void OnInitialized()
        {
            s8service.Parser.s8d.cpu.CpuStepHandler += CpuStepLineHandler;
        }

        public void Dispose()
        {
            // Clean up hooked event handlers
            s8service.Parser.s8d.cpu.CpuStepHandler -= CpuStepLineHandler;
        }

        #endregion Initialize and clean up

        protected override async Task OnAfterRenderAsync(bool firstRender)
        {
            if (!firstRender)
            {
                await SetLineFocus(_currentLine);
            }
            //return base.OnAfterRenderAsync(firstRender);
        }

        private void CpuStepLineHandler(object sender, CpuStepInfo cpustep)
        {
            _currentLine = (cpustep.pc / 2)+1;
            //SetLineFocus(_currentLine);
        }

        private string[] decorationIds;

        internal async Task SetLineFocus(int sourceCodeLine)
        {
            Console.WriteLine($"Stepping to {sourceCodeLine}");

            await _editor.ResetDeltaDecorations(); // remove other decorations

            if (sourceCodeLine < 0) return;

            var newDecorations = new ModelDeltaDecoration[]
            {
                new ModelDeltaDecoration
                {
                    Range = new BlazorMonaco.Bridge.Range(sourceCodeLine,1,sourceCodeLine,1),
                    Options = new ModelDecorationOptions
                    {
                        IsWholeLine = true,
                        ClassName = "decorationContentClass",
                        GlyphMarginClassName = "decorationGlyphMarginClass"
                    }
                }
            };

            //decorationIds = AsyncHelper.RunSync<string[]>(() => _editor.DeltaDecorations(null, newDecorations));
            decorationIds = await _editor.DeltaDecorations(decorationIds, newDecorations);
            // You can now use 'decorationIds' to change or remove the decorations

            _currentLine = -1;
        }



        private async Task StepCode()
        {
            s8service.ClearOutput();
            s8service.Parser.ParseCommand("STEP");
            Output = s8service.GetOutput();
        }

        private async Task ResetCode()
        {
            _editor.SetValue(GetDissasmbledCode());
            s8service.ClearOutput();
            s8service.Parser.ParseCommand("RESET");
            Output = s8service.GetOutput();
        }


        private async Task RunCode()
        {

            s8service.ClearOutput();
            s8service.Parser.ParseCommand("RUN!");
            Output = s8service.GetOutput();
        }

        string GetDissasmbledCode()
        {
            Output = "Step!";

            var asm = s8service.Parser.s8d.DissasembleToList(0, 0xFFF, s8service.Parser.showAddress, false);

            return string.Join(Environment.NewLine, asm);
        }

        private StandaloneEditorConstructionOptions EditorConstructionOptions(MonacoEditor editor)
        {
            string src = GetDissasmbledCode();
            input = "";

            return new StandaloneEditorConstructionOptions
            {
                AutomaticLayout = true,
                Language = "ASM", //SLEDE8
                Value = src
            };
        }

        private async Task EditorOnDidInit(MonacoEditorBase editor)
        {
            await _editor.AddCommand((int)KeyMode.CtrlCmd | (int)KeyCode.KEY_H, (editor, keyCode) =>
            {
                Console.WriteLine("Ctrl+H : Initial editor command is triggered.");
            });
        }



        private void OnContextMenu(EditorMouseEvent eventArg)
        {
            Console.WriteLine("OnContextMenu : " + System.Text.Json.JsonSerializer.Serialize(eventArg));
        }

    }